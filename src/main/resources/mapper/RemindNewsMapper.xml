<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jqsoft.babyservice.mapper.biz.RemindNewsMapper">
  <resultMap id="BaseResultMap" type="com.jqsoft.babyservice.entity.biz.RemindNews">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="examination_id" jdbcType="BIGINT" property="examinationId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="context" jdbcType="VARCHAR" property="context" />
    <result column="news_type" jdbcType="TINYINT" property="newsType" />
    <result column="sign_in" jdbcType="TINYINT" property="signIn" />
    <result column="confirm" jdbcType="TINYINT" property="confirm" />
    <result column="is_delay" jdbcType="TINYINT" property="isDelay" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, examination_id, user_id, title, context, news_type, create_time,
    update_time
  </sql>
  <insert id="insert" parameterType="com.jqsoft.babyservice.entity.biz.RemindNews">
    insert into biz_remind_news (id, examination_id, user_id,
      title, context, news_type,
      create_time,
      update_time)
    values (#{id,jdbcType=BIGINT}, #{examinationId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT},
      #{title,jdbcType=VARCHAR}, #{context,jdbcType=VARCHAR}, #{newsType,jdbcType=TINYINT},
      #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="batchInsert" parameterType="java.util.List">
    insert into biz_remind_news (id, examination_id, user_id
      title, context, news_type,
      create_time,
      update_time)
    values
        <foreach collection="remindNewsList" item="info" separator=",">
          (#{info.id,jdbcType=BIGINT}, #{info.examinationId,jdbcType=BIGINT}, #{info.userId,jdbcType=BIGINT},
            #{info.title,jdbcType=VARCHAR}, #{info.context,jdbcType=VARCHAR}, #{info.newsType,jdbcType=TINYINT},
            #{info.createTime,jdbcType=TIMESTAMP},
            #{info.updateTime,jdbcType=TIMESTAMP})
        </foreach>
  </insert>
  <select id="remindNewsList" resultMap="BaseResultMap">
    select * from (
        SELECT
            a.*,
			b.sign_in,
			IFNULL(b.confirm,0) confirm,
			(CASE
                WHEN b.old_examination_date is not null THEN 1
                ELSE 0
             END) is_delay
        FROM
            biz_remind_news a,
			biz_examination_info b
        WHERE
				a.examination_id = b.id
				and EXISTS (
                SELECT
                    1
                FROM
                    biz_baby_info c,
                    biz_user_info d
                WHERE
                    b.baby_id = c.id
                    AND ( c.parent_id = d.id OR c.father_mobile = d.mobile OR c.mother_mobile = d.mobile )
                    AND d.id = #{userId,jdbcType=BIGINT}
                    )
         union  select e.*,0 sign_in,0 confirm,0 is_delay from biz_remind_news e where e.news_type = -1 and e.user_id = #{userId,jdbcType=BIGINT}
      ) t
        ORDER BY t.create_time DESC
        limit ${offset},${size}
  </select>
  <delete id="deleteByBabyId">
    DELETE
    FROM
        biz_remind_news a
    WHERE
        EXISTS ( SELECT 1 FROM biz_examination_info b WHERE b.id = a.examination_id AND b.baby_id = #{babyId,jdbcType=BIGINT} )
  </delete>
  <select id="getWelcomeNewsByUserId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from biz_remind_news
    where user_id = #{userId,jdbcType=BIGINT}
    limit 1
  </select>
</mapper>