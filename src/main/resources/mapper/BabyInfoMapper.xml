<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jqsoft.babyservice.mapper.biz.BabyInfoMapper">
    <resultMap id="BaseResultMap" type="com.jqsoft.babyservice.entity.biz.BabyInfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="corpid" jdbcType="VARCHAR" property="corpid" />
    <result column="parent_id" jdbcType="VARCHAR" property="parentId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="TINYINT" property="sex" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="father_name" jdbcType="VARCHAR" property="fatherName" />
    <result column="father_mobile" jdbcType="VARCHAR" property="fatherMobile" />
    <result column="mother_mobile" jdbcType="VARCHAR" property="motherMobile" />
    <result column="mother_name" jdbcType="VARCHAR" property="motherName" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <collection property="examinationInfos" column="id" fetchType="lazy" select="com.jqsoft.babyservice.mapper.biz.ExaminationInfoMapper.myExaminationInfo"></collection>
  </resultMap>

  <sql id="Base_Column_List">
    id, corpid, parent_id, name, sex, birthday, avatar, father_name, father_mobile,
    mother_mobile, mother_name, address, state, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from biz_baby_info
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from biz_baby_info
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.jqsoft.babyservice.entity.biz.BabyInfo" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into biz_baby_info (id, corpid, parent_id, name,
      sex, birthday, avatar,
      father_name, father_mobile,
      mother_mobile, mother_name,
      address, state, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{corpid,jdbcType=VARCHAR}, #{parentId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR},
      #{sex,jdbcType=TINYINT}, #{birthday,jdbcType=DATE}, #{avatar,jdbcType=VARCHAR},
      #{fatherName,jdbcType=VARCHAR}, #{fatherMobile,jdbcType=VARCHAR},
      #{motherMobile,jdbcType=VARCHAR}, #{motherName,jdbcType=VARCHAR},
      #{address,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jqsoft.babyservice.entity.biz.BabyInfo">
    insert into biz_baby_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="corpid != null">
        corpid,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
      <if test="fatherName != null">
        father_name,
      </if>
      <if test="fatherMobile != null">
        father_mobile,
      </if>
      <if test="motherMobile != null">
        mother_mobile,
      </if>
      <if test="motherName != null">
        mother_name,
      </if>
        <if test="address != null">
            address,
        </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="corpid != null">
        #{corpid,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="fatherName != null">
        #{fatherName,jdbcType=VARCHAR},
      </if>
      <if test="fatherMobile != null">
        #{fatherMobile,jdbcType=VARCHAR},
      </if>
      <if test="motherMobile != null">
        #{motherMobile,jdbcType=VARCHAR},
      </if>
      <if test="motherName != null">
        #{motherName,jdbcType=VARCHAR},
      </if>
       <if test="address != null">
            #{address,jdbcType=VARCHAR},
        </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jqsoft.babyservice.entity.biz.BabyInfo">
    update biz_baby_info
    <set>
      <if test="corpid != null">
        corpid = #{corpid,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="avatar != null">
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="fatherName != null">
        father_name = #{fatherName,jdbcType=VARCHAR},
      </if>
      <if test="fatherMobile != null">
        father_mobile = #{fatherMobile,jdbcType=VARCHAR},
      </if>
      <if test="motherMobile != null">
        mother_mobile = #{motherMobile,jdbcType=VARCHAR},
      </if>
      <if test="motherName != null">
        mother_name = #{motherName,jdbcType=VARCHAR},
      </if>
        <if test="address != null">
            address = #{address,jdbcType=VARCHAR},
        </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jqsoft.babyservice.entity.biz.BabyInfo">
    update biz_baby_info
    set corpid = #{corpid,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      birthday = #{birthday,jdbcType=DATE},
      avatar = #{avatar,jdbcType=VARCHAR},
      father_name = #{fatherName,jdbcType=VARCHAR},
      father_mobile = #{fatherMobile,jdbcType=VARCHAR},
      mother_mobile = #{motherMobile,jdbcType=VARCHAR},
      mother_name = #{motherName,jdbcType=VARCHAR},
       address = #{address,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="overListCount" resultType="map">
        SELECT
        x.examination_type examinationType,
        COUNT( x.id ) cnt
        FROM
        biz_examination_info x
        INNER JOIN (
        SELECT
        a.baby_id,
        MAX( a.examination_date ) maxdate
        FROM
        biz_examination_info a
        WHERE
        a.examination_date &lt; CURRENT_DATE AND a.sign_in = 0
        AND EXISTS ( SELECT id FROM biz_baby_info WHERE id = a.baby_id AND state = 1 AND a.corpid = #{corpid} )
        GROUP BY a.baby_id
        ) y ON ( x.baby_id = y.baby_id AND x.examination_date = y.maxdate )
        <where>
            <if test="overdueStart != null and '' != overdueStart">
                and DATEDIFF(CURRENT_DATE,y.maxdate) > #{overdueStart,jdbcType=INTEGER}
            </if>
            <if test="overdueEnd != null and '' != overdueEnd">
                and DATEDIFF(CURRENT_DATE,y.maxdate) &lt;= #{overdueEnd,jdbcType=INTEGER}
            </if>
            <if test="dingTimes != null and '' != dingTimes">
                <choose>
                    <when test="dingTimes == 3 ">
                        and x.ding_times >= #{dingTimes,jdbcType=SMALLINT}
                    </when>
                    <otherwise>
                        and x.ding_times = #{dingTimes,jdbcType=SMALLINT}
                    </otherwise>
                </choose>
            </if>
        </where>
        GROUP BY
        x.examination_type
    </select>
  <select id="overdueList" resultType="map">
      select a.id,c.id babyId,c.sex,c.name,c.birthday,a.examination_type age,
      b.examinationDate textTime,DATEDIFF(CURRENT_DATE,examination_date) overTime,a.ding_times dingNum
      from biz_examination_info a,
      (select t.baby_id,MAX(t.examination_date) examinationDate from biz_examination_info t
      where t.examination_date &lt; CURRENT_DATE group by t.baby_id) b,
      biz_baby_info c
      where a.baby_id = b.baby_id
      and a.examination_date = b.examinationDate
      and b.baby_id = c.id
      and c.state = 1
      and a.sign_in = 0
      and c.corpid = #{corpid}
      <if test="param.overdueStart != null and '' != param.overdueStart">
          and DATEDIFF(CURRENT_DATE,a.examination_date) > #{param.overdueStart,jdbcType=INTEGER}
      </if>
      <if test="param.overdueEnd != null and '' != param.overdueEnd">
          and DATEDIFF(CURRENT_DATE,a.examination_date) &lt;= #{param.overdueEnd,jdbcType=INTEGER}
      </if>
      <if test="param.examinationType != null and '' != param.examinationType">
          and a.examination_type = #{param.examinationType,jdbcType=INTEGER}
      </if>
      <if test="param.dingTimes != null">
          <choose>
              <when test="param.dingTimes == 3 ">
                  and a.ding_times >= #{param.dingTimes,jdbcType=SMALLINT}
              </when>
              <otherwise>
                  and a.ding_times = #{param.dingTimes,jdbcType=SMALLINT}
              </otherwise>
          </choose>
      </if>
      order by a.ding_times desc,a.examination_type
      limit #{offset},#{size}
  </select>
    <select id="tomorrowExaminationBabysList" resultType="map">
    SELECT
	a.id,
	b.id babyId,
	b.name,
	b.sex,
	b.birthday,
	a.examination_type age,
	a.examination_date textTime,
	-2 overdueDays
FROM
	biz_examination_info a
	LEFT JOIN biz_baby_info b ON a.baby_id = b.id
WHERE
	b.state = 1
	AND a.sign_in = 0
	AND DATEDIFF( CURRENT_DATE, a.examination_date ) = -2
	AND b.corpid = #{corpid}
	ORDER BY a.examination_type
	limit #{offset},#{size}
  </select>
    <select id="allBabysList" resultType="map">
        SELECT * FROM (
        SELECT a.id,a.name,a.sex,a.birthday,a.corpid,
        (SELECT examination_type FROM biz_examination_info WHERE baby_id = a.id AND examination_date =( SELECT max(
        x.examination_date ) FROM biz_examination_info x WHERE x.examination_date &lt;= CURRENT_DATE AND x.baby_id =
        a.id )) age,
        (SELECT min( y.examination_date ) FROM biz_examination_info y WHERE y.examination_date &gt;= CURRENT_DATE AND
        y.sign_in = 0 AND y.baby_id = a.id) textTime
        FROM biz_baby_info a where a.state = 1 AND a.corpid = #{corpid}
        ) baby
        <where>
            <if test="param.name != null and param.name != ''">
                AND baby.name LIKE CONCAT('%',CONCAT(#{param.name},'%'))
            </if>
            <if test="param.age != null and param.age != ''">
                AND baby.age = #{param.age,jdbcType=INTEGER}
            </if>
            <if test="param.year != null and param.year != ''">
                AND DATE_FORMAT(baby.birthday,'%Y') = #{param.year,jdbcType=INTEGER}
            </if>
        </where>
        ORDER BY baby.age,baby.birthday
        limit #{offset},#{size}
    </select>
    <select id="changeDateBabysList" resultType="map">
    SELECT
        b.id,
        b.name,
        b.sex,
        b.birthday,
        a.examination_type age,
        a.old_examination_date textTime,
        a.examination_date changeTime,
        IFNULL( a.change_date_reason, '' ) result
    FROM
        biz_examination_info a
        LEFT JOIN biz_baby_info b ON a.baby_id = b.id
    WHERE
        b.corpid = #{corpid}
        AND old_examination_date IS NOT NULL
        AND sign_in = 0
        AND examination_date >= CURRENT_DATE
        ORDER BY a.examination_date
        limit #{offset},#{size}
    </select>
  <select id="getBabyParentInfo" resultType="map">
    SELECT
        a.id,
        a.father_name fatherName,
        a.father_mobile fatherMobile,
        f.active fatherActive,
        a.mother_name motherName,
        a.mother_mobile motherMobile,
        m.active motherActive
    FROM biz_baby_info a
    LEFT JOIN biz_user_info f ON a.father_mobile = f.mobile
    LEFT JOIN biz_user_info m ON a.mother_mobile = f.mobile
    where a.id = #{id,jdbcType=BIGINT}
  </select>
  <select id="overdueCount" resultType="java.util.Map">
    SELECT
    count(DATEDIFF( CURRENT_DATE, examination_date ) BETWEEN 8 AND 14 or NULL) overdueDays7,
    count(DATEDIFF( CURRENT_DATE, examination_date ) BETWEEN 15 AND 21 or NULL) overdueDays14,
    count(DATEDIFF( CURRENT_DATE, examination_date ) > 21  or NULL) overdueDays21
    FROM
    biz_examination_info a,
    (SELECT t.baby_id, MAX(t.examination_date) examination_date1 FROM biz_examination_info t WHERE t.examination_date &lt; CURRENT_DATE GROUP BY t.baby_id ) b,
    biz_baby_info c
    WHERE
    a.baby_id = b.baby_id
    AND a.examination_date = b.examination_date1
    AND b.baby_id = c.id
    AND c.state = 1
    AND a.sign_in = 0
    and c.corpid = #{corpid,jdbcType=VARCHAR}
  </select>
  <select id="tomorrowExaminationBabysCount" resultType="java.util.Map">
      SELECT
          count(1) total
      FROM
          biz_baby_info a
      WHERE
          a.corpid = #{corpid,jdbcType=VARCHAR}
          AND a.state = 1
          AND EXISTS (
              SELECT
                  1
              FROM
                  biz_examination_info b
              WHERE
                  a.id = b.baby_id
                  AND datediff( b.examination_date, CURRENT_DATE) = 2
                  AND b.sign_in = 0
            )
  </select>
  <select id="changeDateBabysCount" resultType="java.util.Map">
      SELECT
          count(1) total
      FROM
          biz_baby_info a
      WHERE
          a.corpid = #{corpid,jdbcType=VARCHAR}
          AND a.state = 1
          AND EXISTS (
              SELECT
                  1
              FROM
                  biz_examination_info b
              WHERE
                  a.id = b.baby_id
                  AND b.old_examination_date IS NOT NULL
                  AND b.sign_in = 0
                  AND b.examination_date >= CURRENT_DATE
             )
  </select>
  <select id="allBabysCount" resultType="java.util.Map">
        select
            count(1) total
        from biz_baby_info a
        where a.corpid = #{corpid,jdbcType=VARCHAR}
        and a.state = 1
  </select>
  <select id="myBabys" resultMap="BaseResultMap">
    SELECT
        a.*
    FROM
        biz_baby_info a
    WHERE
        a.state = 1
        and (a.parent_id = #{parentId,jdbcType=BIGINT}
            OR a.father_mobile = #{mobile,jdbcType=VARCHAR}
            OR a.mother_mobile = #{mobile,jdbcType=VARCHAR})
  </select>
</mapper>